Status: Planning


DataStore usage
----------------



What follows shows simple a simple case of creating the datastore
object.

>>> from olpc.datastore import DataStore
>>> ds = DataStore()

Connect a backingstore to the datastore. This binds persistent actual
storage tailored to the backing medium (flash, harddrive, network).

>>> ds.connect(uri_or_backingstore_object)
True

Verify that there are no objects with an empy query.

>>> objects = ds.find()
[]

Now we want to create a document with some sample properties.

>>> doc = ds.create((UUIDProperty('author', 'ee645e853f0f7be027eb408b2d8f7a37be007fd3'),
                     UnicodeProperty('title', 'My Document'),
                     UnicodeProperty('mimetype', 'text/plain')))

This creates an entry in the store with reference to the file on the
backing store itself. If for example the backingstore were a locally
connection filesystem it might contain reference to a file path. If it
were a database, it might return a key that could be used to recover
the object. In either event the backingstore itself has a contact with
the datastore to provide POSIX compliant file access to the objects
content.

This is done by accessing the .open() method on the object. This
method takes methods directly compatable with the standard Python
open call to help determine the mode of access to the underlying
data.

>>> f = doc.open()
>>> print >>f, "hello world"
IOError: [Errno 9] Bad file descriptor

The default access mode is 'r', read only. By opening the file with
write access things work as expected.

>>> f = doc.open('w')
>>> print >>doc.file, 'hello world'
>>> f.close()


Because direct Pythonic access to the underlying data access like this
isn't always possible the datastore itself makes two other options
available.


>>> doc.pathname('w')
...

Will return a pathname to a local object suitable for access with a
given mode. This can be invoked over DBus as expected.

>>> doc.get_data()
'hello world'

Will return the a data blob as a UTF-8 encoded string.

>>> doc.set_data('hello world')

Is short hand for opening the file with write permission, passing in
its data and closing the file. This again is designed to operate over
DBus.
